
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
GPIO_InitTypeDef GPIO_InitStruct;
ADC_InitTypeDef ADC_InitStruct;
ADC_CommonInitTypeDef ADC_CommonInitStruct;
uint16_t adc_value;//12bitlik okuma yapacağız .en az 16 tanımlayabilirz
GPIO_InitTypeDef GPIO_InitStruct;
void GPIO_Config()
{

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_AN;//Analog mode
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_0;
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;

	GPIO_Init(GPIOA,&GPIO_InitStruct);

}

void ADC_Config()
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
	ADC_CommonInitStruct.ADC_Mode=ADC_Mode_Independent;//ADC Değeri bağımsız
	ADC_CommonInitStruct.ADC_Prescaler=ADC_Prescaler_Div4;//ADC MAX 36MHZ te çalışır168/4 en az 4e böleriz
	ADC_CommonInit(&ADC_CommonInitStruct);
	ADC_InitStruct.ADC_Resolution=ADC_Resolution_12b;//Çözünürlük ,kaç bit okuma yapacaksın
	ADC_Init(ADC1,&ADC_InitStruct);
	ADC_Cmd(ADC1,ENABLE);
}

uint16_t Read_ADC()//ADC OKUMASI YAPACAĞIZ //libraries+src+stm32f4xx_adc_cc
{
	//Kanal konfigurasyonu
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1,  ADC_SampleTime_56Cycles); //adc1 den okuma yaptık,hangiporttan okuma yaptık
	//ADC yi yazılımsal olarak başlatmak için
	ADC_SoftwareStartConv(ADC1);
	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC==RESET));//@arg ADC_FLAG_EOC: End of conversion flag:ADC çevrimi bitene kadar bekle
	return ADC_GetConversionValue(ADC1);//ADC DE OKUNAN DEĞER DÖNECEK






}
int main(void)
{
	GPIO_Config();
	ADC_Config();

  while (1)
  {
	  adc_value=Read_ADC();

  }
}

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){

  return;
}


uint16_t EVAL_AUDIO_GetSampleCallBack(void){

  return -1;
}
