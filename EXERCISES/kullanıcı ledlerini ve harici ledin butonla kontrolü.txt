
#include"stm32f4xx.h"
//#include"stm32f4_discovery.h"
int count=0;
GPIO_InitTypeDef GPIO_InitStruct;
void GPIO_Config()
{
	//A portu
RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
GPIO_InitStruct.GPIO_Mode=0x00;//ınput demek
GPIO_InitStruct.GPIO_Pin=GPIO_Pin_0|GPIO_Pin_1;
GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_DOWN;
GPIO_InitStruct.GPIO_Speed=0x03;
GPIO_Init(GPIOA, &GPIO_InitStruct);

//d portu
RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
GPIO_InitStruct.GPIO_Pin=GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14|GPIO_Pin_15;
GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_DOWN;
GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
GPIO_Init(GPIOD,&GPIO_InitStruct);

//b portu
RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
GPIO_InitStruct.GPIO_Pin=GPIO_Pin_0;
GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_DOWN;
GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
GPIO_Init(GPIOB,&GPIO_InitStruct);
}
int main(void)
{
GPIO_Config();

void delay(uint32_t time)
{
while(time--);
}
  while (1)
  {

	  if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0))
	  {

		  while(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0));

		  count++;
		  if(count==1)
		  {
		  GPIO_SetBits(GPIOD,GPIO_Pin_12);//SARI
		  delay(1680000);

		  }
		  else if(count==2)
		  {
		  GPIO_SetBits(GPIOD,GPIO_Pin_13);//TURUNCU
		  delay(1680000);

		  }
		  else if(count==3)
		  {
		  GPIO_SetBits(GPIOD,GPIO_Pin_14);//KIRMIZI
		  delay(1680000);

		  }
		  else if(count==4)
		  {
		  GPIO_SetBits(GPIOD,GPIO_Pin_15);//MAVİ
		  delay(1680000);

		  }
		  else if(count==5)
		  {
		  GPIO_SetBits(GPIOB,GPIO_Pin_0);//PB0 LED
		  delay(1680000);

		  }
		  else{
		  count=0;
		  GPIO_ResetBits(GPIOD,GPIO_Pin_15);
		  delay(336000);
		  GPIO_ResetBits(GPIOD,GPIO_Pin_14);
		  delay(336000);
		  GPIO_ResetBits(GPIOD,GPIO_Pin_13);
		  delay(336000);
		  GPIO_ResetBits(GPIOD,GPIO_Pin_12);
		  delay(336000);
		  GPIO_ResetBits(GPIOB,GPIO_Pin_0);
		  delay(336000);
		  }


	  }
	  if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_1))
	  	  {

	  		  while(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_1));

	  		  count++;
	  		  if(count==1)
	  		  {
	  		  GPIO_SetBits(GPIOB,GPIO_Pin_0);//SARI
	  		  delay(1680000);

	  		  }
	  		  else if(count==2)
	  		  {
	  		  GPIO_SetBits(GPIOD,GPIO_Pin_15);//TURUNCU
	  		  delay(1680000);

	  		  }
	  		  else if(count==3)
	  		  {
	  		  GPIO_SetBits(GPIOD,GPIO_Pin_14);//KIRMIZI
	  		  delay(1680000);

	  		  }
	  		  else if(count==4)
	  		  {
	  		  GPIO_SetBits(GPIOD,GPIO_Pin_13);//MAVİ
	  		  delay(1680000);

	  		  }
	  		  else if(count==5)
	  		  {
	  		  GPIO_SetBits(GPIOD,GPIO_Pin_12);//PB0 LED
	  		  delay(1680000);

	  		  }
	  		  else{
	  		  count=0;
	  		  GPIO_ResetBits(GPIOD,GPIO_Pin_15);
	  		  delay(336000);
	  		  GPIO_ResetBits(GPIOD,GPIO_Pin_14);
	  		  delay(336000);
	  		  GPIO_ResetBits(GPIOD,GPIO_Pin_13);
	  		  delay(336000);
	  		  GPIO_ResetBits(GPIOD,GPIO_Pin_12);
	  		  delay(336000);
	  		  GPIO_ResetBits(GPIOB,GPIO_Pin_0);
	  		  delay(336000);
	  		  }


	  	  }
	  }

  }





/*void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){

  return;
}


uint16_t EVAL_AUDIO_GetSampleCallBack(void){

  return -1;
}
*/
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  /* TODO, implement your code here */
  return;
}

/*
 * Callback used by stm32f401_discovery_audio_codec.c.
 * Refer to stm32f401_discovery_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
  /* TODO, implement your code here */
  return -1;
}
