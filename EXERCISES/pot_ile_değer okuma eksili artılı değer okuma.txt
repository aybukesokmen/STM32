#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "math.h"

GPIO_InitTypeDef GPIO_InitStruct;
ADC_InitTypeDef ADC_InitStruct;
ADC_CommonInitTypeDef ADC_CommonInitStruct;

uint8_t In;
float volt=0;
float direnc;
float deger;
int InMin=0,InMax=255,OutMin,OutMax;
int degisken1,degisken2;


void GPIO_Config()
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14;
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOD,&GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_AN;
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_1;
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOA,&GPIO_InitStruct);

}

void ADC_Config()
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
	ADC_CommonInitStruct.ADC_Mode=ADC_Mode_Independent;
	ADC_CommonInitStruct.ADC_Prescaler=ADC_Prescaler_Div4;
	ADC_CommonInit(&ADC_CommonInitStruct);

	ADC_InitStruct.ADC_Resolution=ADC_Resolution_8b;
	ADC_Init(ADC1,&ADC_InitStruct);
	ADC_Cmd(ADC1,ENABLE);

}


uint8_t Read_ADC()
{
	ADC_RegularChannelConfig(ADC1,ADC_Channel_1,1,ADC_SampleTime_56Cycles);

	ADC_SoftwareStartConv(ADC1);
	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==RESET);

	return ADC_GetConversionValue(ADC1);
}

//MAP FONKSÄ°YONU
uint8_t MAP(int In ,int InMin , int InMax , int OutMin , int OutMax ){
	return (In - InMin) * (OutMax - OutMin) / (InMax - InMin) + OutMin;
}

int main(void)
{
	GPIO_Config();
	ADC_Config();

  while (1)
  {

	  //GPIO_SetBits(GPIOD,GPIO_Pin_12);
	  In=Read_ADC();
	  volt=(2.94*In)/255;
	  deger=(29.4/volt)-10;
	  direnc=round(deger);


	  if(In>0 && In<127)
	  {
		  degisken1=MAP(In,0,126,0,126)*-1;
		  GPIO_SetBits(GPIOD,GPIO_Pin_12);
		  GPIO_ResetBits(GPIOD,GPIO_Pin_13);
		  GPIO_ResetBits(GPIOD,GPIO_Pin_14);
	  }
	  else if(In>128 && In<=255)
	  {
		  degisken2=MAP(In,128,255,128,255);
		  GPIO_ResetBits(GPIOD,GPIO_Pin_12);
		  GPIO_SetBits(GPIOD,GPIO_Pin_13);
		  GPIO_ResetBits(GPIOD,GPIO_Pin_14);
	  }
	  else if(degisken1==-126 && degisken2==129)
	  {
		  GPIO_SetBits(GPIOD,GPIO_Pin_14);
		  GPIO_ResetBits(GPIOD,GPIO_Pin_12);
		  GPIO_ResetBits(GPIOD,GPIO_Pin_13);
	  }

  }
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  return;
}

uint16_t EVAL_AUDIO_GetSampleCallBack(void){
  return -1;
}
