#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "math.h"

GPIO_InitTypeDef GPIO_InitStruct;
ADC_InitTypeDef ADC_InitStruct;
ADC_CommonInitTypeDef ADC_CommonInitStruct;
DAC_InitTypeDef DAC_InitStruct;

uint8_t okunanADC;
float volt=0;
float direnc;
float deger;
int InMin=0,InMax=255,OutMin,OutMax;
int degisken1,degisken2;


void GPIO_Config()
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14;
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOD,&GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_AN;
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_1;//Analog Okuma yaptık.
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOA,&GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_4;//DAC1 4. pinden başlar ve OUT işlemi yaptık.
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOA,&GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_5;//DAC1 5. pinden başlar ve OUT işlemi yaptık.
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOA,&GPIO_InitStruct);
}

void ADC_Config()
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
	ADC_CommonInitStruct.ADC_Mode=ADC_Mode_Independent;
	ADC_CommonInitStruct.ADC_Prescaler=ADC_Prescaler_Div4;
	ADC_CommonInit(&ADC_CommonInitStruct);

	ADC_InitStruct.ADC_Resolution=ADC_Resolution_8b;
	ADC_Init(ADC1,&ADC_InitStruct);
	ADC_Cmd(ADC1,ENABLE);

}
void DAC1_Config()
{
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC,ENABLE);//DAC ı aktif ettik.

	DAC_InitStruct.DAC_OutputBuffer=DAC_OutputBuffer_Enable;//Gürültüden etkilenmemesini sağladık.
	DAC_InitStruct.DAC_Trigger=DAC_Trigger_None;
	DAC_InitStruct.DAC_WaveGeneration=DAC_WaveGeneration_None;//Sinyal üretimi olmasın.

	DAC_Init(DAC_Channel_1,&DAC_InitStruct);
	DAC_Cmd(DAC_Channel_1, ENABLE);

}
void DAC2_Config()
{
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC,ENABLE);//DAC ı aktif ettik.

	DAC_InitStruct.DAC_OutputBuffer=DAC_OutputBuffer_Enable;//Gürültüden etkilenmemesini sağladık.
	DAC_InitStruct.DAC_Trigger=DAC_Trigger_None;
	DAC_InitStruct.DAC_WaveGeneration=DAC_WaveGeneration_None;//Sinyal üretimi olmasın.

	DAC_Init(DAC_Channel_2,&DAC_InitStruct);
	DAC_Cmd(DAC_Channel_2, ENABLE);

}


uint8_t Read_ADC()
{
	ADC_RegularChannelConfig(ADC1,ADC_Channel_1,1,ADC_SampleTime_56Cycles);

	ADC_SoftwareStartConv(ADC1);
	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==RESET);

	return ADC_GetConversionValue(ADC1);
}

//MAP FONKSİYONU
uint8_t aralikFonksiyonu(int okunanADC ,int bitMin , int bitMax , int minCikis , int maxCikis ){
	return (okunanADC - bitMin) * (maxCikis - minCikis) / (bitMax - bitMin) + minCikis;
}

int main(void)
{
	GPIO_Config();
	ADC_Config();
	DAC1_Config();
	DAC2_Config();

  while (1)
  {

	  //GPIO_SetBits(GPIOD,GPIO_Pin_12);
	  okunanADC=Read_ADC();
	  volt=(2.94*okunanADC)/255;
	  deger=(29.4/volt)-10;
	  direnc=round(deger);
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "math.h"

GPIO_InitTypeDef GPIO_InitStruct;
ADC_InitTypeDef ADC_InitStruct;
ADC_CommonInitTypeDef ADC_CommonInitStruct;
DAC_InitTypeDef DAC_InitStruct;

uint8_t okunanADC;
float volt=0;
float direnc;
float deger;
int InMin=0,InMax=255,OutMin,OutMax;
int degisken1,degisken2;
int adc_okunan1;

void GPIO_Config()
{
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_12|GPIO_Pin_13|GPIO_Pin_14;
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOD,&GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_AN;
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_1;//Analog Okuma yaptık.
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOA,&GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_4;//DAC1 4. pinden başlar ve OUT işlemi yaptık.
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOA,&GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitStruct.GPIO_Pin=GPIO_Pin_5;//DAC1 5. pinden başlar ve OUT işlemi yaptık.
	GPIO_InitStruct.GPIO_OType=GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd=GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed=GPIO_Speed_100MHz;
	GPIO_Init(GPIOA,&GPIO_InitStruct);
}

void ADC_Config()
{
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);
	ADC_CommonInitStruct.ADC_Mode=ADC_Mode_Independent;
	ADC_CommonInitStruct.ADC_Prescaler=ADC_Prescaler_Div4;
	ADC_CommonInit(&ADC_CommonInitStruct);

	ADC_InitStruct.ADC_Resolution=ADC_Resolution_8b;
	ADC_Init(ADC1,&ADC_InitStruct);
	ADC_Cmd(ADC1,ENABLE);

}
void DAC1_Config()
{
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC,ENABLE);//DAC ı aktif ettik.

	DAC_InitStruct.DAC_OutputBuffer=DAC_OutputBuffer_Enable;//Gürültüden etkilenmemesini sağladık.
	DAC_InitStruct.DAC_Trigger=DAC_Trigger_None;
	DAC_InitStruct.DAC_WaveGeneration=DAC_WaveGeneration_None;//Sinyal üretimi olmasın.

	DAC_Init(DAC_Channel_1,&DAC_InitStruct);
	DAC_Cmd(DAC_Channel_1, ENABLE);

}
void DAC2_Config()
{
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC,ENABLE);//DAC ı aktif ettik.

	DAC_InitStruct.DAC_OutputBuffer=DAC_OutputBuffer_Enable;//Gürültüden etkilenmemesini sağladık.
	DAC_InitStruct.DAC_Trigger=DAC_Trigger_None;
	DAC_InitStruct.DAC_WaveGeneration=DAC_WaveGeneration_None;//Sinyal üretimi olmasın.

	DAC_Init(DAC_Channel_2,&DAC_InitStruct);
	DAC_Cmd(DAC_Channel_2, ENABLE);

}

uint8_t Read_ADC()
{
	ADC_RegularChannelConfig(ADC1,ADC_Channel_1,1,ADC_SampleTime_56Cycles);


	ADC_SoftwareStartConv(ADC1);
	while(ADC_GetFlagStatus(ADC1,ADC_FLAG_EOC)==RESET);

	return ADC_GetConversionValue(ADC1);
}

//MAP FONKSİYONU
uint8_t aralikFonksiyonu(int okunanADC ,int bitMin , int bitMax , int minCikis , int maxCikis ){
	return (okunanADC - bitMin) * (maxCikis - minCikis) / (bitMax - bitMin) + minCikis;
}

int main(void)
{
	GPIO_Config();
	ADC_Config();
	DAC1_Config();
	DAC2_Config();

  while (1)
  {



	  //GPIO_SetBits(GPIOD,GPIO_Pin_12);
	  okunanADC=Read_ADC();
	  volt=(2.94*okunanADC)/255;
	  adc_okunan1=127- okunanADC;
	  if(okunanADC>128 && okunanADC<=255)
	  {
		  int x=0;
		  x=128-okunanADC;
		  x=x*(-2);
		  DAC_SetChannel1Data(DAC_Align_8b_R,x);
		  x=0;
	  }

	  else if(okunanADC>0 && okunanADC<=126)
	  {

		  int y=0;
		  y=126-okunanADC;
		  y=y*2;
		  DAC_SetChannel2Data(DAC_Align_8b_R,y);
		  y=0;

	  }

  }
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  return;
}

uint16_t EVAL_AUDIO_GetSampleCallBack(void){
  return -1;
}


void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  return;
}

uint16_t EVAL_AUDIO_GetSampleCallBack(void){
  return -1;
}
